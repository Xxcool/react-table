{"version":3,"sources":["TodoItem.js","serviceWorker.js","index.js"],"names":["Option","TodoItem","props","getData","axios","get","then","res","setState","data","sessionStorage","setItem","JSON","stringify","catch","error","console","log","message","handleDelete","id","state","filter","item","handleChange","value","sortKey","arr","sort","a","b","name","localeCompare","oldData","parse","getItem","handelFilter","e","dataList","target","inputValue","newListData","search","push","handelAdd","visible","formRef","React","createRef","handleOk","current","validateFields","values","resetFields","addData","count","map","success","info","handleCancel","columns","title","dataIndex","key","render","text","record","length","onConfirm","this","array","x","className","layout","Item","label","allowClear","style","width","onChange","placeholder","type","onClick","size","dataSource","rowKey","bordered","footer","labelCol","span","wrapperCol","ref","rules","required","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fbd334dc.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Button, Table, Popconfirm, Select, Form, Input, Modal, message } from \"antd\";\nimport axios from \"axios\";\nimport \"./todoItem.less\";\n\nconst { Option } = Select;\nclass TodoItem extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const columns = [\n      {\n        title: \"ID\",\n        dataIndex: \"id\",\n        key: \"id\",\n      },\n      {\n        title: \"Name\",\n        dataIndex: \"name\",\n        key: \"name\",\n      },\n      {\n        title: \"Email\",\n        dataIndex: \"email\",\n        key: \"email\",\n      },\n      {\n        title: \"Action\",\n        key: \"action\",\n        render: (text, record) =>\n          this.state.data.length >= 1 ? (\n            <Popconfirm\n              title=\"Sure to delete?\"\n              onConfirm={() => this.handleDelete(record.id)}\n            >\n              <a>Delete</a>\n            </Popconfirm>\n          ) : null,\n      },\n    ];\n\n    this.state = {\n      columns: columns,\n      data: [],\n      inputValue: \"\",\n      visible: false,\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  getData = () => {\n    var api = \"https://jsonplaceholder.typicode.com/users\";\n    axios\n      .get(api)\n      .then((res) => {\n        this.setState({ data: res.data });\n        // 将原数据储存到本地，用于排序时候切换\n        sessionStorage.setItem(\"data\", JSON.stringify(res.data));\n      })\n      .catch((error) => {\n        console.log(error);\n        message.error(error);\n      });\n  };\n\n  handleDelete = (id) => {\n    const data = [...this.state.data];\n    this.setState({ data: data.filter((item) => item.id !== id) });\n  };\n\n  handleChange = (value) => {\n    const data = [...this.state.data];\n    // 当value存在并且为id的时候，按照id降序排列\n    // 当value存在并且为name的时候，按照a-z的顺序排列\n    if (value) {\n      if (value == \"id\") {\n        this.setState({ data: this.sortKey(data, \"id\") });\n      } else {\n        let arr = data.sort((a, b) => a.name.localeCompare(b.name));\n        this.setState({ data: arr });\n      }\n    } else {\n      // 当value不存在得时候，显示原来的数据\n      let oldData = JSON.parse(sessionStorage.getItem(\"data\"));\n      this.setState({ data: oldData });\n    }\n  };\n\n  handelFilter = (e) => {\n    const dataList = JSON.parse(sessionStorage.getItem(\"data\"));\n    const value = e.target.value;\n    this.setState({ inputValue: value });\n    let newListData = [];\n    // 当输入有值时候进行模糊查询，为空的时候显示原数据\n    if (value) {\n      dataList.filter((item) => {\n        if (item.name.search(value) != -1) {\n          newListData.push(item);\n        }\n        return newListData;\n      });\n      this.setState({ data: newListData });\n    } else {\n      let oldData = JSON.parse(sessionStorage.getItem(\"data\"));\n      this.setState({ data: oldData });\n    }\n  };\n\n  // 排序函数\n  sortKey(array, key) {\n    return array.sort(function (a, b) {\n      var x = a[key];\n      var y = b[key];\n      return y - x;\n    });\n  }\n\n  handelAdd = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  // 定义表单\n  formRef = React.createRef();\n\n  handleOk = (e) => {\n    this.formRef.current\n      .validateFields()\n      .then((values) => {\n        this.formRef.current.resetFields();\n        this.setState({\n          visible: false,\n        });\n        \n        const addData = [...this.state.data];\n        addData.push(values)\n        let count = 0\n        addData.map(item => {\n          count ++\n          if(!item.id) {\n            item.id = count\n          }\n        })\n        message.success(\"successful\");\n        // 将新增的数据储存到本地\n        sessionStorage.setItem(\"data\", JSON.stringify(addData));\n        this.setState({ data: addData });\n        console.log(addData);\n      })\n      .catch((info) => {\n        console.log(\"Validate Failed:\", info);\n      });\n  };\n\n  handleCancel = () => {\n    this.formRef.current.resetFields();\n    this.setState({\n      visible: false,\n    });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"container\">\n          <Form layout=\"inline\">\n            <Form.Item label=\"Filter By\">\n              <Input\n                allowClear\n                style={{ width: 120 }}\n                value={this.state.inputValue}\n                onChange={this.handelFilter}\n              />\n            </Form.Item>\n            <Form.Item label=\"Sort By\">\n              <Select\n                allowClear\n                placeholder=\"Please select\"\n                onChange={this.handleChange}\n                style={{width: 120}}\n              >\n                <Option value=\"id\">ID</Option>\n                <Option value=\"name\">Name</Option>\n              </Select>\n            </Form.Item>\n            <Button type=\"primary\" onClick={this.handelAdd}>\n              Add User\n            </Button>\n          </Form>\n          <Table\n            size=\"small\"\n            columns={this.state.columns}\n            dataSource={this.state.data}\n            rowKey={(record) => record.id}\n            bordered\n          />\n        </div>\n\n        <Modal\n          title=\"Add User\"\n          visible={this.state.visible}\n          footer={[\n            <Button key=\"cancel\" onClick={this.handleCancel}>\n              Cancel\n            </Button>,\n            <Button key=\"add\" type=\"primary\" onClick={this.handleOk}>\n              Add\n            </Button>,\n          ]}\n        >\n          <Form labelCol={{ span: 4 }} wrapperCol={{ span: 14 }} ref={this.formRef}>\n            <Form.Item\n              label=\"Name\"\n              name=\"name\"\n              rules={[{ required: true, message: \"Please input your Name!\" }]}\n            >\n              <Input />\n            </Form.Item>\n            <Form.Item\n              label=\"Email\"\n              name=\"email\"\n              rules={[{ required: true, message: \"Please input your Email!\" }]}\n            >\n              <Input />\n            </Form.Item>\n          </Form>\n        </Modal>\n      </Fragment>\n    );\n  }\n}\n\nexport default TodoItem;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport TodoItem from \"./TodoItem\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<TodoItem />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}